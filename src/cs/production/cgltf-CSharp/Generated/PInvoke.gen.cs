
// <auto-generated>
//  This code was generated by the following tool on 2023-10-23 23:19:06 GMT-04:00:
//      https://github.com/bottlenoselabs/c2cs (v6.1.3.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template
#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using bottlenoselabs.C2CS.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
#endregion

namespace cgltf;

public static unsafe partial class PInvoke
{
    private const string LibraryName = "cgltf";

    #region API

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_accessor_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAccessorIndex(CgltfData* data, CgltfAccessor* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_accessor_read_float")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfBool CgltfAccessorReadFloat(CgltfAccessor* accessor, CgltfSize index, CgltfFloat* @out, CgltfSize elementSize);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_accessor_read_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAccessorReadIndex(CgltfAccessor* accessor, CgltfSize index);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_accessor_read_uint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfBool CgltfAccessorReadUint(CgltfAccessor* accessor, CgltfSize index, CgltfUint* @out, CgltfSize elementSize);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_accessor_unpack_floats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAccessorUnpackFloats(CgltfAccessor* accessor, CgltfFloat* @out, CgltfSize floatCount);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_accessor_unpack_indices")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAccessorUnpackIndices(CgltfAccessor* accessor, CgltfUint* @out, CgltfSize indexCount);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_animation_channel_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAnimationChannelIndex(CgltfAnimation* animation, CgltfAnimationChannel* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_animation_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAnimationIndex(CgltfData* data, CgltfAnimation* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_animation_sampler_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfAnimationSamplerIndex(CgltfAnimation* animation, CgltfAnimationSampler* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_buffer_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfBufferIndex(CgltfData* data, CgltfBuffer* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_buffer_view_data")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial byte* CgltfBufferViewData(CgltfBufferView* view);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_buffer_view_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfBufferViewIndex(CgltfData* data, CgltfBufferView* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_calc_size")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfCalcSize(CgltfType type, CgltfComponentType componentType);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_camera_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfCameraIndex(CgltfData* data, CgltfCamera* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_component_size")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfComponentSize(CgltfComponentType componentType);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_copy_extras_json")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfCopyExtrasJson(CgltfData* data, CgltfExtras* extras, CString dest, CgltfSize* destSize);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_decode_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfDecodeString(CString @string);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_decode_uri")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfDecodeUri(CString uri);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_free")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void CgltfFree(CgltfData* data);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_image_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfImageIndex(CgltfData* data, CgltfImage* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_light_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfLightIndex(CgltfData* data, CgltfLight* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_load_buffer_base64")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfLoadBufferBase64(CgltfOptions* options, CgltfSize size, CString base64, void** outData);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_load_buffers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfLoadBuffers(CgltfOptions* options, CgltfData* data, CString gltfPath);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_material_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfMaterialIndex(CgltfData* data, CgltfMaterial* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_mesh_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfMeshIndex(CgltfData* data, CgltfMesh* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_node_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfNodeIndex(CgltfData* data, CgltfNode* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_node_transform_local")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void CgltfNodeTransformLocal(CgltfNode* node, CgltfFloat* outMatrix);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_node_transform_world")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void CgltfNodeTransformWorld(CgltfNode* node, CgltfFloat* outMatrix);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_num_components")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfNumComponents(CgltfType type);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_parse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfParse(CgltfOptions* options, void* data, CgltfSize size, CgltfData** outData);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_parse_file")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfParseFile(CgltfOptions* options, CString path, CgltfData** outData);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_sampler_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfSamplerIndex(CgltfData* data, CgltfSampler* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_scene_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfSceneIndex(CgltfData* data, CgltfScene* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_skin_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfSkinIndex(CgltfData* data, CgltfSkin* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_texture_index")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfTextureIndex(CgltfData* data, CgltfTexture* @object);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_validate")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfValidate(CgltfData* data);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_write")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfSize CgltfWrite(CgltfOptions* options, CString buffer, CgltfSize size, CgltfData* data);

    [CNode(Kind = "Function")]
    [LibraryImport(LibraryName, EntryPoint = "cgltf_write_file")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CgltfResult CgltfWriteFile(CgltfOptions* options, CString path, CgltfData* data);

    #endregion

    #region Types

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_CgltfMemoryOptionsPtr_CgltfFileOptionsPtr_CString_CgltfSizePtr_VoidPtrPtr_CgltfResult
    {
        public delegate* unmanaged<CgltfMemoryOptions*, CgltfFileOptions*, CString, CgltfSize*, void**, CgltfResult> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_CgltfMemoryOptionsPtr_CgltfFileOptionsPtr_VoidPtr_Void
    {
        public delegate* unmanaged<CgltfMemoryOptions*, CgltfFileOptions*, void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CgltfSize_VoidPtr
    {
        public delegate* unmanaged<void*, CgltfSize, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void*, void> Pointer;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 408, Pack = 8)]
    public struct CgltfAccessor
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 4
        public CgltfComponentType ComponentType;

        [FieldOffset(12)] // size = 4
        public CgltfBool Normalized;

        [FieldOffset(16)] // size = 4
        public CgltfType Type;

        [FieldOffset(24)] // size = 8
        public CgltfSize Offset;

        [FieldOffset(32)] // size = 8
        public CgltfSize Count;

        [FieldOffset(40)] // size = 8
        public CgltfSize Stride;

        [FieldOffset(48)] // size = 8
        public CgltfBufferView* BufferView;

        [FieldOffset(56)] // size = 4
        public CgltfBool HasMin;

        [FieldOffset(60)] // size = 64
        public fixed byte _Min[64]; // cgltf_float[16]

        public readonly Span<CgltfFloat> Min
        {
            get
            {
                fixed (CgltfAccessor* @this = &this)
                {
                    var pointer = &@this->_Min[0];
                    var span = new Span<CgltfFloat>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(124)] // size = 4
        public CgltfBool HasMax;

        [FieldOffset(128)] // size = 64
        public fixed byte _Max[64]; // cgltf_float[16]

        public readonly Span<CgltfFloat> Max
        {
            get
            {
                fixed (CgltfAccessor* @this = &this)
                {
                    var pointer = &@this->_Max[0];
                    var span = new Span<CgltfFloat>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(192)] // size = 4
        public CgltfBool IsSparse;

        [FieldOffset(200)] // size = 168
        public CgltfAccessorSparse Sparse;

        [FieldOffset(368)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(392)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(400)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 168, Pack = 8)]
    public struct CgltfAccessorSparse
    {
        [FieldOffset(0)] // size = 8
        public CgltfSize Count;

        [FieldOffset(8)] // size = 8
        public CgltfBufferView* IndicesBufferView;

        [FieldOffset(16)] // size = 8
        public CgltfSize IndicesByteOffset;

        [FieldOffset(24)] // size = 4
        public CgltfComponentType IndicesComponentType;

        [FieldOffset(32)] // size = 8
        public CgltfBufferView* ValuesBufferView;

        [FieldOffset(40)] // size = 8
        public CgltfSize ValuesByteOffset;

        [FieldOffset(48)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(72)] // size = 24
        public CgltfExtras IndicesExtras;

        [FieldOffset(96)] // size = 24
        public CgltfExtras ValuesExtras;

        [FieldOffset(120)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(128)] // size = 8
        public CgltfExtension* Extensions;

        [FieldOffset(136)] // size = 8
        public CgltfSize IndicesExtensionsCount;

        [FieldOffset(144)] // size = 8
        public CgltfExtension* IndicesExtensions;

        [FieldOffset(152)] // size = 8
        public CgltfSize ValuesExtensionsCount;

        [FieldOffset(160)] // size = 8
        public CgltfExtension* ValuesExtensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct CgltfAnimation
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfAnimationSampler* Samplers;

        [FieldOffset(16)] // size = 8
        public CgltfSize SamplersCount;

        [FieldOffset(24)] // size = 8
        public CgltfAnimationChannel* Channels;

        [FieldOffset(32)] // size = 8
        public CgltfSize ChannelsCount;

        [FieldOffset(40)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(64)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(72)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct CgltfAnimationChannel
    {
        [FieldOffset(0)] // size = 8
        public CgltfAnimationSampler* Sampler;

        [FieldOffset(8)] // size = 8
        public CgltfNode* TargetNode;

        [FieldOffset(16)] // size = 4
        public CgltfAnimationPathType TargetPath;

        [FieldOffset(24)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(48)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(56)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct CgltfAnimationSampler
    {
        [FieldOffset(0)] // size = 8
        public CgltfAccessor* Input;

        [FieldOffset(8)] // size = 8
        public CgltfAccessor* Output;

        [FieldOffset(16)] // size = 4
        public CgltfInterpolationType Interpolation;

        [FieldOffset(24)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(48)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(56)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct CgltfAnisotropy
    {
        [FieldOffset(0)] // size = 4
        public CgltfFloat AnisotropyStrength;

        [FieldOffset(4)] // size = 4
        public CgltfFloat AnisotropyRotation;

        [FieldOffset(8)] // size = 88
        public CgltfTextureView AnisotropyTexture;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct CgltfAsset
    {
        [FieldOffset(0)] // size = 8
        public CString _Copyright;

        public string Copyright
        {
            get
            {
                return CString.ToString(_Copyright);
            }
            set
            {
                _Copyright = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _Generator;

        public string Generator
        {
            get
            {
                return CString.ToString(_Generator);
            }
            set
            {
                _Generator = CString.FromString(value);
            }
        }

        [FieldOffset(16)] // size = 8
        public CString _Version;

        public string Version
        {
            get
            {
                return CString.ToString(_Version);
            }
            set
            {
                _Version = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 8
        public CString _MinVersion;

        public string MinVersion
        {
            get
            {
                return CString.ToString(_MinVersion);
            }
            set
            {
                _MinVersion = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(56)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(64)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct CgltfAttribute
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 4
        public CgltfAttributeType Type;

        [FieldOffset(12)] // size = 4
        public CgltfInt Index;

        [FieldOffset(16)] // size = 8
        public CgltfAccessor* Data;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct CgltfBuffer
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfSize Size;

        [FieldOffset(16)] // size = 8
        public CString _Uri;

        public string Uri
        {
            get
            {
                return CString.ToString(_Uri);
            }
            set
            {
                _Uri = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 8
        public void* Data;

        [FieldOffset(32)] // size = 4
        public CgltfDataFreeMethod DataFreeMethod;

        [FieldOffset(40)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(64)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(72)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
    public struct CgltfBufferView
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfBuffer* Buffer;

        [FieldOffset(16)] // size = 8
        public CgltfSize Offset;

        [FieldOffset(24)] // size = 8
        public CgltfSize Size;

        [FieldOffset(32)] // size = 8
        public CgltfSize Stride;

        [FieldOffset(40)] // size = 4
        public CgltfBufferViewType Type;

        [FieldOffset(48)] // size = 8
        public void* Data;

        [FieldOffset(56)] // size = 4
        public CgltfBool HasMeshoptCompression;

        [FieldOffset(64)] // size = 48
        public CgltfMeshoptCompression MeshoptCompression;

        [FieldOffset(112)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(136)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(144)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 8)]
    public struct CgltfCamera
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 4
        public CgltfCameraType Type;

        [FieldOffset(16)] // size = 48
        public CgltfCameraANONYMOUSFIELD2 Data;

        [FieldOffset(64)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(88)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(96)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Union")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct CgltfCameraANONYMOUSFIELD2
    {
        [FieldOffset(0)] // size = 48
        public CgltfCameraPerspective Perspective;

        [FieldOffset(0)] // size = 40
        public CgltfCameraOrthographic Orthographic;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct CgltfCameraOrthographic
    {
        [FieldOffset(0)] // size = 4
        public CgltfFloat Xmag;

        [FieldOffset(4)] // size = 4
        public CgltfFloat Ymag;

        [FieldOffset(8)] // size = 4
        public CgltfFloat Zfar;

        [FieldOffset(12)] // size = 4
        public CgltfFloat Znear;

        [FieldOffset(16)] // size = 24
        public CgltfExtras Extras;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct CgltfCameraPerspective
    {
        [FieldOffset(0)] // size = 4
        public CgltfBool HasAspectRatio;

        [FieldOffset(4)] // size = 4
        public CgltfFloat AspectRatio;

        [FieldOffset(8)] // size = 4
        public CgltfFloat Yfov;

        [FieldOffset(12)] // size = 4
        public CgltfBool HasZfar;

        [FieldOffset(16)] // size = 4
        public CgltfFloat Zfar;

        [FieldOffset(20)] // size = 4
        public CgltfFloat Znear;

        [FieldOffset(24)] // size = 24
        public CgltfExtras Extras;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
    public struct CgltfClearcoat
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView ClearcoatTexture;

        [FieldOffset(88)] // size = 88
        public CgltfTextureView ClearcoatRoughnessTexture;

        [FieldOffset(176)] // size = 88
        public CgltfTextureView ClearcoatNormalTexture;

        [FieldOffset(264)] // size = 4
        public CgltfFloat ClearcoatFactor;

        [FieldOffset(268)] // size = 4
        public CgltfFloat ClearcoatRoughnessFactor;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 488, Pack = 8)]
    public struct CgltfData
    {
        [FieldOffset(0)] // size = 4
        public CgltfFileType FileType;

        [FieldOffset(8)] // size = 8
        public void* FileData;

        [FieldOffset(16)] // size = 72
        public CgltfAsset Asset;

        [FieldOffset(88)] // size = 8
        public CgltfMesh* Meshes;

        [FieldOffset(96)] // size = 8
        public CgltfSize MeshesCount;

        [FieldOffset(104)] // size = 8
        public CgltfMaterial* Materials;

        [FieldOffset(112)] // size = 8
        public CgltfSize MaterialsCount;

        [FieldOffset(120)] // size = 8
        public CgltfAccessor* Accessors;

        [FieldOffset(128)] // size = 8
        public CgltfSize AccessorsCount;

        [FieldOffset(136)] // size = 8
        public CgltfBufferView* BufferViews;

        [FieldOffset(144)] // size = 8
        public CgltfSize BufferViewsCount;

        [FieldOffset(152)] // size = 8
        public CgltfBuffer* Buffers;

        [FieldOffset(160)] // size = 8
        public CgltfSize BuffersCount;

        [FieldOffset(168)] // size = 8
        public CgltfImage* Images;

        [FieldOffset(176)] // size = 8
        public CgltfSize ImagesCount;

        [FieldOffset(184)] // size = 8
        public CgltfTexture* Textures;

        [FieldOffset(192)] // size = 8
        public CgltfSize TexturesCount;

        [FieldOffset(200)] // size = 8
        public CgltfSampler* Samplers;

        [FieldOffset(208)] // size = 8
        public CgltfSize SamplersCount;

        [FieldOffset(216)] // size = 8
        public CgltfSkin* Skins;

        [FieldOffset(224)] // size = 8
        public CgltfSize SkinsCount;

        [FieldOffset(232)] // size = 8
        public CgltfCamera* Cameras;

        [FieldOffset(240)] // size = 8
        public CgltfSize CamerasCount;

        [FieldOffset(248)] // size = 8
        public CgltfLight* Lights;

        [FieldOffset(256)] // size = 8
        public CgltfSize LightsCount;

        [FieldOffset(264)] // size = 8
        public CgltfNode* Nodes;

        [FieldOffset(272)] // size = 8
        public CgltfSize NodesCount;

        [FieldOffset(280)] // size = 8
        public CgltfScene* Scenes;

        [FieldOffset(288)] // size = 8
        public CgltfSize ScenesCount;

        [FieldOffset(296)] // size = 8
        public CgltfScene* Scene;

        [FieldOffset(304)] // size = 8
        public CgltfAnimation* Animations;

        [FieldOffset(312)] // size = 8
        public CgltfSize AnimationsCount;

        [FieldOffset(320)] // size = 8
        public CgltfMaterialVariant* Variants;

        [FieldOffset(328)] // size = 8
        public CgltfSize VariantsCount;

        [FieldOffset(336)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(360)] // size = 8
        public CgltfSize DataExtensionsCount;

        [FieldOffset(368)] // size = 8
        public CgltfExtension* DataExtensions;

        [FieldOffset(376)] // size = 8
        public CString* ExtensionsUsed;

        [FieldOffset(384)] // size = 8
        public CgltfSize ExtensionsUsedCount;

        [FieldOffset(392)] // size = 8
        public CString* ExtensionsRequired;

        [FieldOffset(400)] // size = 8
        public CgltfSize ExtensionsRequiredCount;

        [FieldOffset(408)] // size = 8
        public CString _Json;

        public string Json
        {
            get
            {
                return CString.ToString(_Json);
            }
            set
            {
                _Json = CString.FromString(value);
            }
        }

        [FieldOffset(416)] // size = 8
        public CgltfSize JsonSize;

        [FieldOffset(424)] // size = 8
        public void* Bin;

        [FieldOffset(432)] // size = 8
        public CgltfSize BinSize;

        [FieldOffset(440)] // size = 24
        public CgltfMemoryOptions Memory;

        [FieldOffset(464)] // size = 24
        public CgltfFileOptions File;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct CgltfDracoMeshCompression
    {
        [FieldOffset(0)] // size = 8
        public CgltfBufferView* BufferView;

        [FieldOffset(8)] // size = 8
        public CgltfAttribute* Attributes;

        [FieldOffset(16)] // size = 8
        public CgltfSize AttributesCount;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct CgltfEmissiveStrength
    {
        [FieldOffset(0)] // size = 4
        public CgltfFloat EmissiveStrength;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct CgltfExtension
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _Data;

        public string Data
        {
            get
            {
                return CString.ToString(_Data);
            }
            set
            {
                _Data = CString.FromString(value);
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct CgltfExtras
    {
        [FieldOffset(0)] // size = 8
        public CgltfSize StartOffset;

        [FieldOffset(8)] // size = 8
        public CgltfSize EndOffset;

        [FieldOffset(16)] // size = 8
        public CString _Data;

        public string Data
        {
            get
            {
                return CString.ToString(_Data);
            }
            set
            {
                _Data = CString.FromString(value);
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct CgltfFileOptions
    {
        [FieldOffset(0)] // size = 8
        public FnPtr_CgltfMemoryOptionsPtr_CgltfFileOptionsPtr_CString_CgltfSizePtr_VoidPtrPtr_CgltfResult Read;

        [FieldOffset(8)] // size = 8
        public FnPtr_CgltfMemoryOptionsPtr_CgltfFileOptionsPtr_VoidPtr_Void Release;

        [FieldOffset(16)] // size = 8
        public void* UserData;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct CgltfImage
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _Uri;

        public string Uri
        {
            get
            {
                return CString.ToString(_Uri);
            }
            set
            {
                _Uri = CString.FromString(value);
            }
        }

        [FieldOffset(16)] // size = 8
        public CgltfBufferView* BufferView;

        [FieldOffset(24)] // size = 8
        public CString _MimeType;

        public string MimeType
        {
            get
            {
                return CString.ToString(_MimeType);
            }
            set
            {
                _MimeType = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(56)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(64)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct CgltfIor
    {
        [FieldOffset(0)] // size = 4
        public CgltfFloat Ior;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
    public struct CgltfIridescence
    {
        [FieldOffset(0)] // size = 4
        public CgltfFloat IridescenceFactor;

        [FieldOffset(8)] // size = 88
        public CgltfTextureView IridescenceTexture;

        [FieldOffset(96)] // size = 4
        public CgltfFloat IridescenceIor;

        [FieldOffset(100)] // size = 4
        public CgltfFloat IridescenceThicknessMin;

        [FieldOffset(104)] // size = 4
        public CgltfFloat IridescenceThicknessMax;

        [FieldOffset(112)] // size = 88
        public CgltfTextureView IridescenceThicknessTexture;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct CgltfLight
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 12
        public fixed byte _Color[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> Color
        {
            get
            {
                fixed (CgltfLight* @this = &this)
                {
                    var pointer = &@this->_Color[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(20)] // size = 4
        public CgltfFloat Intensity;

        [FieldOffset(24)] // size = 4
        public CgltfLightType Type;

        [FieldOffset(28)] // size = 4
        public CgltfFloat Range;

        [FieldOffset(32)] // size = 4
        public CgltfFloat SpotInnerConeAngle;

        [FieldOffset(36)] // size = 4
        public CgltfFloat SpotOuterConeAngle;

        [FieldOffset(40)] // size = 24
        public CgltfExtras Extras;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 1984, Pack = 8)]
    public struct CgltfMaterial
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 4
        public CgltfBool HasPbrMetallicRoughness;

        [FieldOffset(12)] // size = 4
        public CgltfBool HasPbrSpecularGlossiness;

        [FieldOffset(16)] // size = 4
        public CgltfBool HasClearcoat;

        [FieldOffset(20)] // size = 4
        public CgltfBool HasTransmission;

        [FieldOffset(24)] // size = 4
        public CgltfBool HasVolume;

        [FieldOffset(28)] // size = 4
        public CgltfBool HasIor;

        [FieldOffset(32)] // size = 4
        public CgltfBool HasSpecular;

        [FieldOffset(36)] // size = 4
        public CgltfBool HasSheen;

        [FieldOffset(40)] // size = 4
        public CgltfBool HasEmissiveStrength;

        [FieldOffset(44)] // size = 4
        public CgltfBool HasIridescence;

        [FieldOffset(48)] // size = 4
        public CgltfBool HasAnisotropy;

        [FieldOffset(56)] // size = 200
        public CgltfPbrMetallicRoughness PbrMetallicRoughness;

        [FieldOffset(256)] // size = 208
        public CgltfPbrSpecularGlossiness PbrSpecularGlossiness;

        [FieldOffset(464)] // size = 272
        public CgltfClearcoat Clearcoat;

        [FieldOffset(736)] // size = 4
        public CgltfIor Ior;

        [FieldOffset(744)] // size = 192
        public CgltfSpecular Specular;

        [FieldOffset(936)] // size = 200
        public CgltfSheen Sheen;

        [FieldOffset(1136)] // size = 96
        public CgltfTransmission Transmission;

        [FieldOffset(1232)] // size = 112
        public CgltfVolume Volume;

        [FieldOffset(1344)] // size = 4
        public CgltfEmissiveStrength EmissiveStrength;

        [FieldOffset(1352)] // size = 200
        public CgltfIridescence Iridescence;

        [FieldOffset(1552)] // size = 96
        public CgltfAnisotropy Anisotropy;

        [FieldOffset(1648)] // size = 88
        public CgltfTextureView NormalTexture;

        [FieldOffset(1736)] // size = 88
        public CgltfTextureView OcclusionTexture;

        [FieldOffset(1824)] // size = 88
        public CgltfTextureView EmissiveTexture;

        [FieldOffset(1912)] // size = 12
        public fixed byte _EmissiveFactor[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> EmissiveFactor
        {
            get
            {
                fixed (CgltfMaterial* @this = &this)
                {
                    var pointer = &@this->_EmissiveFactor[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(1924)] // size = 4
        public CgltfAlphaMode AlphaMode;

        [FieldOffset(1928)] // size = 4
        public CgltfFloat AlphaCutoff;

        [FieldOffset(1932)] // size = 4
        public CgltfBool DoubleSided;

        [FieldOffset(1936)] // size = 4
        public CgltfBool Unlit;

        [FieldOffset(1944)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(1968)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(1976)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct CgltfMaterialMapping
    {
        [FieldOffset(0)] // size = 8
        public CgltfSize Variant;

        [FieldOffset(8)] // size = 8
        public CgltfMaterial* Material;

        [FieldOffset(16)] // size = 24
        public CgltfExtras Extras;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct CgltfMaterialVariant
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 24
        public CgltfExtras Extras;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct CgltfMemoryOptions
    {
        [FieldOffset(0)] // size = 8
        public FnPtr_VoidPtr_CgltfSize_VoidPtr AllocFunc;

        [FieldOffset(8)] // size = 8
        public FnPtr_VoidPtr_VoidPtr_Void FreeFunc;

        [FieldOffset(16)] // size = 8
        public void* UserData;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct CgltfMesh
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfPrimitive* Primitives;

        [FieldOffset(16)] // size = 8
        public CgltfSize PrimitivesCount;

        [FieldOffset(24)] // size = 8
        public CgltfFloat* Weights;

        [FieldOffset(32)] // size = 8
        public CgltfSize WeightsCount;

        [FieldOffset(40)] // size = 8
        public CString* TargetNames;

        [FieldOffset(48)] // size = 8
        public CgltfSize TargetNamesCount;

        [FieldOffset(56)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(80)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(88)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct CgltfMeshGpuInstancing
    {
        [FieldOffset(0)] // size = 8
        public CgltfAttribute* Attributes;

        [FieldOffset(8)] // size = 8
        public CgltfSize AttributesCount;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct CgltfMeshoptCompression
    {
        [FieldOffset(0)] // size = 8
        public CgltfBuffer* Buffer;

        [FieldOffset(8)] // size = 8
        public CgltfSize Offset;

        [FieldOffset(16)] // size = 8
        public CgltfSize Size;

        [FieldOffset(24)] // size = 8
        public CgltfSize Stride;

        [FieldOffset(32)] // size = 8
        public CgltfSize Count;

        [FieldOffset(40)] // size = 4
        public CgltfMeshoptCompressionMode Mode;

        [FieldOffset(44)] // size = 4
        public CgltfMeshoptCompressionFilter Filter;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct CgltfMorphTarget
    {
        [FieldOffset(0)] // size = 8
        public CgltfAttribute* Attributes;

        [FieldOffset(8)] // size = 8
        public CgltfSize AttributesCount;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 264, Pack = 8)]
    public struct CgltfNode
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfNode* Parent;

        [FieldOffset(16)] // size = 8
        public CgltfNode** Children;

        [FieldOffset(24)] // size = 8
        public CgltfSize ChildrenCount;

        [FieldOffset(32)] // size = 8
        public CgltfSkin* Skin;

        [FieldOffset(40)] // size = 8
        public CgltfMesh* Mesh;

        [FieldOffset(48)] // size = 8
        public CgltfCamera* Camera;

        [FieldOffset(56)] // size = 8
        public CgltfLight* Light;

        [FieldOffset(64)] // size = 8
        public CgltfFloat* Weights;

        [FieldOffset(72)] // size = 8
        public CgltfSize WeightsCount;

        [FieldOffset(80)] // size = 4
        public CgltfBool HasTranslation;

        [FieldOffset(84)] // size = 4
        public CgltfBool HasRotation;

        [FieldOffset(88)] // size = 4
        public CgltfBool HasScale;

        [FieldOffset(92)] // size = 4
        public CgltfBool HasMatrix;

        [FieldOffset(96)] // size = 12
        public fixed byte _Translation[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> Translation
        {
            get
            {
                fixed (CgltfNode* @this = &this)
                {
                    var pointer = &@this->_Translation[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(108)] // size = 16
        public fixed byte _Rotation[16]; // cgltf_float[4]

        public readonly Span<CgltfFloat> Rotation
        {
            get
            {
                fixed (CgltfNode* @this = &this)
                {
                    var pointer = &@this->_Rotation[0];
                    var span = new Span<CgltfFloat>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(124)] // size = 12
        public fixed byte _Scale[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> Scale
        {
            get
            {
                fixed (CgltfNode* @this = &this)
                {
                    var pointer = &@this->_Scale[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(136)] // size = 64
        public fixed byte _Matrix[64]; // cgltf_float[16]

        public readonly Span<CgltfFloat> Matrix
        {
            get
            {
                fixed (CgltfNode* @this = &this)
                {
                    var pointer = &@this->_Matrix[0];
                    var span = new Span<CgltfFloat>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(200)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(224)] // size = 4
        public CgltfBool HasMeshGpuInstancing;

        [FieldOffset(232)] // size = 16
        public CgltfMeshGpuInstancing MeshGpuInstancing;

        [FieldOffset(248)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(256)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct CgltfOptions
    {
        [FieldOffset(0)] // size = 4
        public CgltfFileType Type;

        [FieldOffset(8)] // size = 8
        public CgltfSize JsonTokenCount;

        [FieldOffset(16)] // size = 24
        public CgltfMemoryOptions Memory;

        [FieldOffset(40)] // size = 24
        public CgltfFileOptions File;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
    public struct CgltfPbrMetallicRoughness
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView BaseColorTexture;

        [FieldOffset(88)] // size = 88
        public CgltfTextureView MetallicRoughnessTexture;

        [FieldOffset(176)] // size = 16
        public fixed byte _BaseColorFactor[16]; // cgltf_float[4]

        public readonly Span<CgltfFloat> BaseColorFactor
        {
            get
            {
                fixed (CgltfPbrMetallicRoughness* @this = &this)
                {
                    var pointer = &@this->_BaseColorFactor[0];
                    var span = new Span<CgltfFloat>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(192)] // size = 4
        public CgltfFloat MetallicFactor;

        [FieldOffset(196)] // size = 4
        public CgltfFloat RoughnessFactor;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 208, Pack = 8)]
    public struct CgltfPbrSpecularGlossiness
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView DiffuseTexture;

        [FieldOffset(88)] // size = 88
        public CgltfTextureView SpecularGlossinessTexture;

        [FieldOffset(176)] // size = 16
        public fixed byte _DiffuseFactor[16]; // cgltf_float[4]

        public readonly Span<CgltfFloat> DiffuseFactor
        {
            get
            {
                fixed (CgltfPbrSpecularGlossiness* @this = &this)
                {
                    var pointer = &@this->_DiffuseFactor[0];
                    var span = new Span<CgltfFloat>(pointer, 4);
                    return span;
                }
            }
        }

        [FieldOffset(192)] // size = 12
        public fixed byte _SpecularFactor[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> SpecularFactor
        {
            get
            {
                fixed (CgltfPbrSpecularGlossiness* @this = &this)
                {
                    var pointer = &@this->_SpecularFactor[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(204)] // size = 4
        public CgltfFloat GlossinessFactor;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 144, Pack = 8)]
    public struct CgltfPrimitive
    {
        [FieldOffset(0)] // size = 4
        public CgltfPrimitiveType Type;

        [FieldOffset(8)] // size = 8
        public CgltfAccessor* Indices;

        [FieldOffset(16)] // size = 8
        public CgltfMaterial* Material;

        [FieldOffset(24)] // size = 8
        public CgltfAttribute* Attributes;

        [FieldOffset(32)] // size = 8
        public CgltfSize AttributesCount;

        [FieldOffset(40)] // size = 8
        public CgltfMorphTarget* Targets;

        [FieldOffset(48)] // size = 8
        public CgltfSize TargetsCount;

        [FieldOffset(56)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(80)] // size = 4
        public CgltfBool HasDracoMeshCompression;

        [FieldOffset(88)] // size = 24
        public CgltfDracoMeshCompression DracoMeshCompression;

        [FieldOffset(112)] // size = 8
        public CgltfMaterialMapping* Mappings;

        [FieldOffset(120)] // size = 8
        public CgltfSize MappingsCount;

        [FieldOffset(128)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(136)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct CgltfSampler
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 4
        public CgltfInt MagFilter;

        [FieldOffset(12)] // size = 4
        public CgltfInt MinFilter;

        [FieldOffset(16)] // size = 4
        public CgltfInt WrapS;

        [FieldOffset(20)] // size = 4
        public CgltfInt WrapT;

        [FieldOffset(24)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(48)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(56)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct CgltfScene
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfNode** Nodes;

        [FieldOffset(16)] // size = 8
        public CgltfSize NodesCount;

        [FieldOffset(24)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(48)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(56)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
    public struct CgltfSheen
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView SheenColorTexture;

        [FieldOffset(88)] // size = 12
        public fixed byte _SheenColorFactor[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> SheenColorFactor
        {
            get
            {
                fixed (CgltfSheen* @this = &this)
                {
                    var pointer = &@this->_SheenColorFactor[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(104)] // size = 88
        public CgltfTextureView SheenRoughnessTexture;

        [FieldOffset(192)] // size = 4
        public CgltfFloat SheenRoughnessFactor;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct CgltfSkin
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfNode** Joints;

        [FieldOffset(16)] // size = 8
        public CgltfSize JointsCount;

        [FieldOffset(24)] // size = 8
        public CgltfNode* Skeleton;

        [FieldOffset(32)] // size = 8
        public CgltfAccessor* InverseBindMatrices;

        [FieldOffset(40)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(64)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(72)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 192, Pack = 8)]
    public struct CgltfSpecular
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView SpecularTexture;

        [FieldOffset(88)] // size = 88
        public CgltfTextureView SpecularColorTexture;

        [FieldOffset(176)] // size = 12
        public fixed byte _SpecularColorFactor[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> SpecularColorFactor
        {
            get
            {
                fixed (CgltfSpecular* @this = &this)
                {
                    var pointer = &@this->_SpecularColorFactor[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(188)] // size = 4
        public CgltfFloat SpecularFactor;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct CgltfTexture
    {
        [FieldOffset(0)] // size = 8
        public CString _Name;

        public string Name
        {
            get
            {
                return CString.ToString(_Name);
            }
            set
            {
                _Name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CgltfImage* Image;

        [FieldOffset(16)] // size = 8
        public CgltfSampler* Sampler;

        [FieldOffset(24)] // size = 4
        public CgltfBool HasBasisu;

        [FieldOffset(32)] // size = 8
        public CgltfImage* BasisuImage;

        [FieldOffset(40)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(64)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(72)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct CgltfTextureTransform
    {
        [FieldOffset(0)] // size = 8
        public fixed byte _Offset[8]; // cgltf_float[2]

        public readonly Span<CgltfFloat> Offset
        {
            get
            {
                fixed (CgltfTextureTransform* @this = &this)
                {
                    var pointer = &@this->_Offset[0];
                    var span = new Span<CgltfFloat>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(8)] // size = 4
        public CgltfFloat Rotation;

        [FieldOffset(12)] // size = 8
        public fixed byte _Scale[8]; // cgltf_float[2]

        public readonly Span<CgltfFloat> Scale
        {
            get
            {
                fixed (CgltfTextureTransform* @this = &this)
                {
                    var pointer = &@this->_Scale[0];
                    var span = new Span<CgltfFloat>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(20)] // size = 4
        public CgltfBool HasTexcoord;

        [FieldOffset(24)] // size = 4
        public CgltfInt Texcoord;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct CgltfTextureView
    {
        [FieldOffset(0)] // size = 8
        public CgltfTexture* Texture;

        [FieldOffset(8)] // size = 4
        public CgltfInt Texcoord;

        [FieldOffset(12)] // size = 4
        public CgltfFloat Scale;

        [FieldOffset(16)] // size = 4
        public CgltfBool HasTransform;

        [FieldOffset(20)] // size = 28
        public CgltfTextureTransform Transform;

        [FieldOffset(48)] // size = 24
        public CgltfExtras Extras;

        [FieldOffset(72)] // size = 8
        public CgltfSize ExtensionsCount;

        [FieldOffset(80)] // size = 8
        public CgltfExtension* Extensions;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct CgltfTransmission
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView TransmissionTexture;

        [FieldOffset(88)] // size = 4
        public CgltfFloat TransmissionFactor;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 112, Pack = 8)]
    public struct CgltfVolume
    {
        [FieldOffset(0)] // size = 88
        public CgltfTextureView ThicknessTexture;

        [FieldOffset(88)] // size = 4
        public CgltfFloat ThicknessFactor;

        [FieldOffset(92)] // size = 12
        public fixed byte _AttenuationColor[12]; // cgltf_float[3]

        public readonly Span<CgltfFloat> AttenuationColor
        {
            get
            {
                fixed (CgltfVolume* @this = &this)
                {
                    var pointer = &@this->_AttenuationColor[0];
                    var span = new Span<CgltfFloat>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(104)] // size = 4
        public CgltfFloat AttenuationDistance;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct JsmnParser
    {
        [FieldOffset(0)] // size = 8
        public ulong Pos;

        [FieldOffset(8)] // size = 4
        public uint Toknext;

        [FieldOffset(12)] // size = 4
        public int Toksuper;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct JsmntokT
    {
        [FieldOffset(0)] // size = 4
        public JsmntypeT Type;

        [FieldOffset(8)] // size = 8
        public IntPtr Start;

        [FieldOffset(16)] // size = 8
        public IntPtr End;

        [FieldOffset(24)] // size = 4
        public int Size;

        [FieldOffset(28)] // size = 4
        public int Parent;
    }

    [CNode(Kind = "Enum")]
    public enum CgltfAlphaMode : int
    {
        CgltfAlphaModeOpaque = 0,
        CgltfAlphaModeMask = 1,
        CgltfAlphaModeBlend = 2,
        CgltfAlphaModeMaxEnum = 3
    }

    [CNode(Kind = "Enum")]
    public enum CgltfAnimationPathType : int
    {
        CgltfAnimationPathTypeInvalid = 0,
        CgltfAnimationPathTypeTranslation = 1,
        CgltfAnimationPathTypeRotation = 2,
        CgltfAnimationPathTypeScale = 3,
        CgltfAnimationPathTypeWeights = 4,
        CgltfAnimationPathTypeMaxEnum = 5
    }

    [CNode(Kind = "Enum")]
    public enum CgltfAttributeType : int
    {
        CgltfAttributeTypeInvalid = 0,
        CgltfAttributeTypePosition = 1,
        CgltfAttributeTypeNormal = 2,
        CgltfAttributeTypeTangent = 3,
        CgltfAttributeTypeTexcoord = 4,
        CgltfAttributeTypeColor = 5,
        CgltfAttributeTypeJoints = 6,
        CgltfAttributeTypeWeights = 7,
        CgltfAttributeTypeCustom = 8,
        CgltfAttributeTypeMaxEnum = 9
    }

    [CNode(Kind = "Enum")]
    public enum CgltfBufferViewType : int
    {
        CgltfBufferViewTypeInvalid = 0,
        CgltfBufferViewTypeIndices = 1,
        CgltfBufferViewTypeVertices = 2,
        CgltfBufferViewTypeMaxEnum = 3
    }

    [CNode(Kind = "Enum")]
    public enum CgltfCameraType : int
    {
        CgltfCameraTypeInvalid = 0,
        CgltfCameraTypePerspective = 1,
        CgltfCameraTypeOrthographic = 2,
        CgltfCameraTypeMaxEnum = 3
    }

    [CNode(Kind = "Enum")]
    public enum CgltfComponentType : int
    {
        CgltfComponentTypeInvalid = 0,
        CgltfComponentTypeR8 = 1,
        CgltfComponentTypeR8u = 2,
        CgltfComponentTypeR16 = 3,
        CgltfComponentTypeR16u = 4,
        CgltfComponentTypeR32u = 5,
        CgltfComponentTypeR32f = 6,
        CgltfComponentTypeMaxEnum = 7
    }

    [CNode(Kind = "Enum")]
    public enum CgltfDataFreeMethod : int
    {
        CgltfDataFreeMethodNone = 0,
        CgltfDataFreeMethodFileRelease = 1,
        CgltfDataFreeMethodMemoryFree = 2,
        CgltfDataFreeMethodMaxEnum = 3
    }

    [CNode(Kind = "Enum")]
    public enum CgltfFileType : int
    {
        CgltfFileTypeInvalid = 0,
        CgltfFileTypeGltf = 1,
        CgltfFileTypeGlb = 2,
        CgltfFileTypeMaxEnum = 3
    }

    [CNode(Kind = "Enum")]
    public enum CgltfInterpolationType : int
    {
        CgltfInterpolationTypeLinear = 0,
        CgltfInterpolationTypeStep = 1,
        CgltfInterpolationTypeCubicSpline = 2,
        CgltfInterpolationTypeMaxEnum = 3
    }

    [CNode(Kind = "Enum")]
    public enum CgltfLightType : int
    {
        CgltfLightTypeInvalid = 0,
        CgltfLightTypeDirectional = 1,
        CgltfLightTypePoint = 2,
        CgltfLightTypeSpot = 3,
        CgltfLightTypeMaxEnum = 4
    }

    [CNode(Kind = "Enum")]
    public enum CgltfMeshoptCompressionFilter : int
    {
        CgltfMeshoptCompressionFilterNone = 0,
        CgltfMeshoptCompressionFilterOctahedral = 1,
        CgltfMeshoptCompressionFilterQuaternion = 2,
        CgltfMeshoptCompressionFilterExponential = 3,
        CgltfMeshoptCompressionFilterMaxEnum = 4
    }

    [CNode(Kind = "Enum")]
    public enum CgltfMeshoptCompressionMode : int
    {
        CgltfMeshoptCompressionModeInvalid = 0,
        CgltfMeshoptCompressionModeAttributes = 1,
        CgltfMeshoptCompressionModeTriangles = 2,
        CgltfMeshoptCompressionModeIndices = 3,
        CgltfMeshoptCompressionModeMaxEnum = 4
    }

    [CNode(Kind = "Enum")]
    public enum CgltfPrimitiveType : int
    {
        CgltfPrimitiveTypePoints = 0,
        CgltfPrimitiveTypeLines = 1,
        CgltfPrimitiveTypeLineLoop = 2,
        CgltfPrimitiveTypeLineStrip = 3,
        CgltfPrimitiveTypeTriangles = 4,
        CgltfPrimitiveTypeTriangleStrip = 5,
        CgltfPrimitiveTypeTriangleFan = 6,
        CgltfPrimitiveTypeMaxEnum = 7
    }

    [CNode(Kind = "Enum")]
    public enum CgltfResult : int
    {
        CgltfResultSuccess = 0,
        CgltfResultDataTooShort = 1,
        CgltfResultUnknownFormat = 2,
        CgltfResultInvalidJson = 3,
        CgltfResultInvalidGltf = 4,
        CgltfResultInvalidOptions = 5,
        CgltfResultFileNotFound = 6,
        CgltfResultIoError = 7,
        CgltfResultOutOfMemory = 8,
        CgltfResultLegacyGltf = 9,
        CgltfResultMaxEnum = 10
    }

    [CNode(Kind = "Enum")]
    public enum CgltfType : int
    {
        CgltfTypeInvalid = 0,
        CgltfTypeScalar = 1,
        CgltfTypeVec2 = 2,
        CgltfTypeVec3 = 3,
        CgltfTypeVec4 = 4,
        CgltfTypeMat2 = 5,
        CgltfTypeMat3 = 6,
        CgltfTypeMat4 = 7,
        CgltfTypeMaxEnum = 8
    }

    [CNode(Kind = "Enum")]
    public enum Jsmnerr : int
    {
        JSMNERRORNOMEM = -1,
        JSMNERRORINVAL = -2,
        JSMNERRORPART = -3
    }

    [CNode(Kind = "Enum")]
    public enum JsmntypeT : int
    {
        JSMNUNDEFINED = 0,
        JSMNOBJECT = 1,
        JSMNARRAY = 2,
        JSMNSTRING = 3,
        JSMNPRIMITIVE = 4
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct CgltfBool
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(CgltfBool data) => data.Data;
        public static implicit operator CgltfBool(int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct CgltfFloat
    {
        [FieldOffset(0)]
        public float Data;

        public static implicit operator float(CgltfFloat data) => data.Data;
        public static implicit operator CgltfFloat(float data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct CgltfInt
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(CgltfInt data) => data.Data;
        public static implicit operator CgltfInt(int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct CgltfSize
    {
        [FieldOffset(0)]
        public ulong Data;

        public static implicit operator ulong(CgltfSize data) => data.Data;
        public static implicit operator CgltfSize(ulong data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct CgltfUint
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(CgltfUint data) => data.Data;
        public static implicit operator CgltfUint(uint data) => new() { Data = data };
    }

    [CNode(Kind = "MacroObject")]
    public const int CgltfErrorJson = -1;

    [CNode(Kind = "MacroObject")]
    public const int CgltfErrorLegacy = -3;

    [CNode(Kind = "MacroObject")]
    public const int CgltfErrorNomem = -2;

    [CNode(Kind = "MacroObject")]
    public const int CgltfValidateEnableAsserts = 0;

    #endregion
}
